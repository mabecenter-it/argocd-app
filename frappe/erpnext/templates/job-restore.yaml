{{- if .Values.jobs.restore.enabled }}

########################################################################
# 1) ConfigMap con el script Python                                    #
########################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "erpnext.fullname" . }}-restore-script
  labels:
    {{- include "erpnext.labels" . | nindent 4 }}
data:
  restore_db.py: |
    import os
    import sys
    import re
    import subprocess
    import glob
    import boto3
    from botocore.config import Config

    def main():
        print("Starting restore_db.py")

        # 1) Leer variables de entorno
        storage_url = os.environ.get("STORAGE_URL", "")  # p.ej. "http://minio:9000"
        bucket_name = os.environ.get("BUCKET_NAME", "")  # p.ej. "mi-bucket"
        access_key = os.environ.get("ACCESS_KEY", "")
        secret_key = os.environ.get("SECRET_KEY", "")
        site_name = os.environ.get("SITE_NAME", "")
        restore_dir = "/home/frappe/restore"

        # Validaciones básicas
        if not storage_url:
            print("Error: STORAGE_URL no está definido.")
            sys.exit(1)
        if not bucket_name:
            print("Error: BUCKET_NAME no está definido.")
            sys.exit(1)
        if not access_key or not secret_key:
            print("Error: ACCESS_KEY o SECRET_KEY no están definidos.")
            sys.exit(1)
        if not site_name:
            print("Error: SITE_NAME no está definido.")
            sys.exit(1)

        print(f"STORAGE_URL = {storage_url}")
        print(f"BUCKET_NAME = {bucket_name}")
        print(f"SITE_NAME   = {site_name}")
        print(f"Restore dir = {restore_dir}")

        # 2) Conectarse al bucket con boto3
        try:
            s3_client = boto3.client(
                's3',
                endpoint_url=storage_url,                # MinIO/S3 endpoint
                aws_access_key_id=access_key,
                aws_secret_access_key=secret_key,
                config=Config(signature_version='s3v4')  # Asegura la firma para S3/MinIO
            )
        except Exception as e:
            print(f"Error al inicializar el cliente S3: {e}")
            sys.exit(1)

        # 3) Listar objetos en el bucket
        try:
            response = s3_client.list_objects_v2(Bucket=bucket_name)
            # Nota: list_objects_v2 devuelve hasta 1000 objetos. 
            # Si tu bucket tiene más, necesitarás paginación (ContinuationToken).
        except Exception as e:
            print(f"Error al listar objetos en el bucket {bucket_name}: {e}")
            sys.exit(1)

        if 'Contents' not in response:
            print(f"No se encontraron archivos en el bucket {bucket_name}.")
            sys.exit(1)

        # Obtener las claves de los objetos
        all_keys = [obj['Key'] for obj in response['Contents']]
        if not all_keys:
            print("No se encontraron archivos (Key) en el bucket.")
            sys.exit(1)

        # 4) Determinar la subcarpeta más reciente
        #    (Suponiendo que las "subcarpetas" son el primer segmento antes de un '/')
        folders = set(k.split('/')[0] for k in all_keys if '/' in k)
        if not folders:
            print("No se encontraron subcarpetas en el listado.")
            sys.exit(1)

        folder_list_sorted = sorted(folders)
        folder = folder_list_sorted[-1]
        print(f"Subcarpeta seleccionada: {folder}")

        # Filtrar los objetos que empiecen con esa carpeta
        to_download = [k for k in all_keys if k.startswith(folder + "/")]
        if not to_download:
            print(f"No se encontraron archivos dentro de la subcarpeta '{folder}'.")
            sys.exit(1)

        # 5) Crear directorio de restore
        os.makedirs(restore_dir, exist_ok=True)

        # 6) Descargar cada archivo
        for file_key in to_download:
            basename = os.path.basename(file_key)
            if not basename:
                print(f"Archivo con nombre inválido: {file_key}. Se omite.")
                continue

            local_path = os.path.join(restore_dir, basename)

            print(f"Descargando {file_key} -> {local_path}")
            try:
                s3_client.download_file(bucket_name, file_key, local_path)
            except Exception as e:
                print(f"Error al descargar {file_key}: {e}")
                if os.path.exists(local_path):
                    os.remove(local_path)
                continue

        print("Descarga finalizada.")

        # 7) Localizar el archivo de DB
        db_files = glob.glob(os.path.join(restore_dir, "*-database.sql.gz"))
        if not db_files:
            print("No se encontró ningún archivo '-database.sql.gz' para restaurar.")
            sys.exit(0)

        db_backup_sql = db_files[0]
        print(f"Archivo de backup encontrado: {db_backup_sql}")

        # 8) Ejecutar bench restore
        root_user = "root"
        root_password = "SMNGg8X66YhT7UfW"  # Ajustar con la cred real

        restore_cmd = [
            "bench",
            "--site", site_name,
            "restore",
            db_backup_sql,
            f"--db-root-username={root_user}",
            f"--db-root-password={root_password}"
        ]

        print("Ejecutando restore con:", " ".join(restore_cmd))
        try:
            subprocess.run(restore_cmd, check=True)
            print("Restore completado con éxito.")
        except subprocess.CalledProcessError as e:
            print("Error durante la restauración:", e)
            sys.exit(1)

    if __name__ == "__main__":
        main()
        
---

########################################################################
# 2) Job que monta el script y lo ejecuta                              #
########################################################################
apiVersion: batch/v1
kind: Job
metadata:
  {{- if .Values.jobs.restore.jobName }}
  name: {{ .Values.jobs.restore.jobName }}
  {{- else }}
  name: {{ template "erpnext.fullname" . }}-restore-{{ now | date "20060102150405" }}
  {{- end }}
  labels:
    {{- include "erpnext.labels" . | nindent 4 }}
spec:
  backoffLimit: {{ .Values.jobs.restore.backoffLimit }}
  template:
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "erpnext.serviceAccountName" $ }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      containers:
      - name: restore
        # Imagen que contenga Python y bench
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["python3", "/scripts/restore_db.py"]
        env:
          - name: "SITE_NAME"
            value: "{{ .Values.jobs.restore.siteName }}"
          - name: "STORAGE_URL"
            value: "{{ .Values.jobs.restore.minio.endpoint }}"
        resources:
          {{- toYaml .Values.jobs.restore.resources | nindent 10 }}
        securityContext:
          {{- toYaml $.Values.securityContext | nindent 10 }}
        volumeMounts:
          - name: restore-script
            mountPath: /scripts
            readOnly: true

          - name: sites-dir
            mountPath: /home/frappe/frappe-bench/sites
          - name: logs
            mountPath: /home/frappe/frappe-bench/logs
          - name: restore-dir
            mountPath: /home/frappe/restore

      restartPolicy: Never

      volumes:
        - name: restore-script
          configMap:
            name: {{ include "erpnext.fullname" . }}-restore-script
            items:
              - key: restore_db.py
                path: restore_db.py

        - name: sites-dir
          {{- if .Values.persistence.worker.enabled }}
          persistentVolumeClaim:
            {{- if .Values.persistence.worker.existingClaim }}
            claimName: {{ .Values.persistence.worker.existingClaim }}
            {{- else }}
            claimName: {{ template "erpnext.fullname" . }}
            {{- end }}
            readOnly: false
          {{- else }}
          emptyDir: {}
          {{- end }}

        - name: logs
          {{- if .Values.persistence.logs.enabled }}
          persistentVolumeClaim:
            {{- if .Values.persistence.logs.existingClaim }}
            claimName: {{ .Values.persistence.logs.existingClaim }}
            {{- else }}
            claimName: {{ template "erpnext.fullname" . }}-logs
            {{- end }}
            readOnly: false
          {{- else }}
          emptyDir: {}
          {{- end }}

        - name: restore-dir
          emptyDir: {}

      {{- with .Values.jobs.restore.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.restore.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.restore.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

{{- end }}