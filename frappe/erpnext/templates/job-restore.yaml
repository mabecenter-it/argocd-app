{{- if .Values.jobs.restore.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  {{- if .Values.jobs.restore.jobName }}
  name: {{ .Values.jobs.restore.jobName }}
  {{- else }}
  name: {{ template "erpnext.fullname" . }}-restore-{{ now | date "20060102150405" }}
  {{- end }}
  labels:
    {{- include "erpnext.labels" . | nindent 4 }}
spec:
  backoffLimit: {{ .Values.jobs.restore.backoffLimit }}
  template:
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "erpnext.serviceAccountName" $ }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      containers:
      - name: restore
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["bash", "-c"]
        args:
          - |
            STORAGE_URL="http://store-hl.storage.svc.cluster.local:9000/erpnext/"
            AUTH="--user minio:minio123"
            RESTORE_DIR="/home/frappe/restore"
            SITE_NAME="{{ .Values.jobs.restore.siteName }}"  # Replace with actual site name if not using templating

            # Fetch the latest folder from the storage
            FOLDER=$(curl -s "${STORAGE_URL}?list-type=2" \
                | grep "<Key>" \
                | sed -n "s:.*<Key>\(.*\)</Key>.*:\1:p" \
                | awk -F'/' '{print $1}' \
                | sort | uniq | tail -n 1)

            if [ -z "$FOLDER" ]; then
              echo "No folder found."
              exit 1
            fi

            echo "Selected folder: $FOLDER"

            # Fetch the list of files in the selected folder
            FILES=$(curl -s "${STORAGE_URL}?list-type=2" \
                | grep -oP "(?<=<Key>${FOLDER}/).*?(?=</Key>)")

            if [ -z "$FILES" ]; then
              echo "No files found in folder $FOLDER."
              exit 1
            fi

            echo "Files to download:"
            echo "$FILES"

            # Create restore directory if it doesn't exist
            mkdir -p "$RESTORE_DIR"

            # Download each file
            for FILE in $FILES; do
              BASENAME=$(basename "$FILE")
              if [ -z "$BASENAME" ]; then
                echo "Invalid file name for $FILE."
                continue
              fi

              echo "Downloading $FILE as $BASENAME"
              curl -s -o "${RESTORE_DIR}/${BASENAME}" "${STORAGE_URL}${FILE}" ${AUTH}

              if [ $? -ne 0 ]; then
                echo "Error downloading $FILE"
                continue
              fi
            done

            echo "Download process completed."

            # Decompress the database SQL file if it's gzipped
            DB_BACKUP_GZ=$(ls ${RESTORE_DIR}/*-database.sql.gz 2>/dev/null)
            DB_BACKUP_SQL=""

            if [ -n "$DB_BACKUP_GZ" ]; then
              echo "Found compressed database backup: $DB_BACKUP_GZ"
              
              # Check if the file is actually gzipped
              if file "$DB_BACKUP_GZ" | grep -q 'gzip compressed data'; then
                echo "Decompressing $DB_BACKUP_GZ"
                gunzip "$DB_BACKUP_GZ"
                
                if [ $? -ne 0 ]; then
                  echo "Error decompressing $DB_BACKUP_GZ"
                  exit 1
                fi
                
                DB_BACKUP_SQL="${DB_BACKUP_GZ%.gz}"
                
                if [ ! -f "$DB_BACKUP_SQL" ]; then
                  echo "Decompressed database backup file not found."
                  exit 1
                fi
                
                echo "Database backup decompressed to $DB_BACKUP_SQL"
              else
                echo "Database backup file is not compressed."
                DB_BACKUP_SQL="$DB_BACKUP_GZ"  # Even though it has .gz, it's not compressed
              fi
            else
              echo "No compressed database backup file found."
              # Check if there's an uncompressed SQL file
              DB_BACKUP_SQL=$(ls ${RESTORE_DIR}/*-database.sql 2>/dev/null)
              
              if [ -z "$DB_BACKUP_SQL" ]; then
                echo "No database backup file found."
                exit 1
              else
                echo "Using uncompressed database backup: $DB_BACKUP_SQL"
              fi
            fi

            # Verify that the SQL file exists
            if [ ! -f "$DB_BACKUP_SQL" ]; then
              echo "Database backup file does not exist."
              exit 1
            fi

            # Restore the database using bench
            echo "Starting restore for site $SITE_NAME"

            bench --site "$SITE_NAME" restore "$DB_BACKUP_SQL" --force

            if [ $? -ne 0 ]; then
              echo "Database restore failed."
              exit 1
            fi

            echo "Database restore completed successfully."

            # Optional: Handle other backup files (e.g., files.tar, private-files.tar, site_config_backup.json)
            # Add extraction steps as needed, similar to how the database backup was handled

            echo "Restore process completed successfully."
        env:
          - name: "SITE_NAME"
            value: "{{ .Values.jobs.restore.siteName }}"
        resources:
          {{- toYaml .Values.jobs.restore.resources | nindent 10 }}
        securityContext:
          {{- toYaml $.Values.securityContext | nindent 10 }}
        volumeMounts:
          - name: sites-dir
            mountPath: /home/frappe/frappe-bench/sites
          - name: logs
            mountPath: /home/frappe/frappe-bench/logs
          - name: restore-dir
            mountPath: /home/frappe/restore
      restartPolicy: Never
      volumes:
        - name: sites-dir
          {{- if .Values.persistence.worker.enabled }}
          persistentVolumeClaim:
            {{- if .Values.persistence.worker.existingClaim }}
            claimName: {{ .Values.persistence.worker.existingClaim }}
            {{- else }}
            claimName: {{ template "erpnext.fullname" . }}
            {{- end }}
            readOnly: false
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: logs
          {{- if .Values.persistence.logs.enabled }}
          persistentVolumeClaim:
            {{- if .Values.persistence.logs.existingClaim }}
            claimName: {{ .Values.persistence.logs.existingClaim }}
            {{- else }}
            claimName: {{ template "erpnext.fullname" . }}-logs
            {{- end }}
            readOnly: false
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: restore-dir
          emptyDir: {}
      {{- with .Values.jobs.restore.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.restore.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.restore.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
