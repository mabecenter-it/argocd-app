{{- if .Values.jobs.backup.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  {{- if .Values.jobs.backup.jobName }}
  name: {{ .Values.jobs.backup.jobName }}
  {{- else }}
  name: {{ template "erpnext.fullname" . }}-backup-{{ now | date "20060102150405" }}
  {{- end }}
  labels:
    {{- include "erpnext.labels" . | nindent 4 }}
spec:
  backoffLimit: {{ .Values.jobs.backup.backoffLimit }}
  template:
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "erpnext.serviceAccountName" $ }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      containers:
      - name: backup
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["bash", "-c"]
        args:
          - >
            bench --site=$(SITE_NAME)
          {{- if .Values.jobs.backup.withFiles }}
            backup --with-files;
          {{- else }}
            backup;
          {{- end }}
          {{- if .Values.jobs.backup.push.enabled }}
            echo "Nombre del Sitio: $SITE_NAME"

            # Obtener el archivo de respaldo más reciente con extensión .gz o .json (ajustar según tus formatos)
            BACKUP_FILE=$(ls /home/frappe/frappe-bench/sites/$SITE_NAME/private/backups/ | grep -E '\.(gz|json)$' | sort | tail -n 1)
            echo "Archivo de Respaldo Seleccionado: $BACKUP_FILE"

            # Extraer el prefijo de la fecha y hora del nombre del archivo para usarlo como carpeta
            DESTINATION_FOLDER=$(echo "$BACKUP_FILE" | cut -d'-' -f1)
            echo "Carpeta de Destino: $DESTINATION_FOLDER"

            # Construir el path completo dentro del bucket
            OBJECT_KEY="$DESTINATION_FOLDER/$BACKUP_FILE"
            echo "Objeto en el Bucket: $OBJECT_KEY"

            # Crear la firma HMAC para la solicitud PUT
            STRING_TO_SIGN="PUT\n\napplication/octet-stream\n\n/$DESTINATION_FOLDER/$BACKUP_FILE"
            SIGNATURE=$(echo -n "$STRING_TO_SIGN" | openssl sha1 -hmac "$SECRET_KEY" -binary | openssl base64)

            # Realizar la subida del archivo utilizando curl
            curl -X PUT "$BACKUP_PATH/$OBJECT_KEY" \
              -H "Content-Type: application/octet-stream" \
              -H "Authorization: AWS $ACCESS_KEY:$SIGNATURE" \
              --upload-file "/home/frappe/frappe-bench/sites/$SITE_NAME/private/backups/$BACKUP_FILE"

            # Verificar el resultado de la subida
            if [ $? -eq 0 ]; then
              echo "Archivo de respaldo subido correctamente a $OBJECT_KEY en el bucket {{ .Values.jobs.backup.push.bucket }}"
            else
              echo "Error al subir el archivo de respaldo."
              exit 1
            fi
          {{- end }}
          {{- end }}
        env:
          - name: "SITE_NAME"
            value: "{{ .Values.jobs.backup.siteName }}"
          - name: "ACCESS_KEY"
            value: "{{ .Values.jobs.backup.push.accessKey }}"
          - name: "SECRET_KEY"
            value: "{{ .Values.jobs.backup.push.secretKey }}"
          - name: "BACKUP_PATH"
            value: "{{ .Values.jobs.backup.push.endpoint }}/{{ .Values.jobs.backup.push.bucket }}"
        resources:
          {{- toYaml .Values.jobs.backup.resources | nindent 10 }}
        securityContext:
          {{- toYaml $.Values.securityContext | nindent 10 }}
        volumeMounts:
          - name: sites-dir
            mountPath: /home/frappe/frappe-bench/sites
          - name: logs
            mountPath: /home/frappe/frappe-bench/logs
      restartPolicy: Never
      volumes:
        - name: sites-dir
          {{- if .Values.persistence.worker.enabled }}
          persistentVolumeClaim:
            {{- if .Values.persistence.worker.existingClaim }}
            claimName: {{ .Values.persistence.worker.existingClaim }}
            {{- else }}
            claimName: {{ template "erpnext.fullname" . }}
            {{- end }}
            readOnly: false
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: logs
          {{- if .Values.persistence.logs.enabled }}
          persistentVolumeClaim:
            {{- if .Values.persistence.logs.existingClaim }}
            claimName: {{ .Values.persistence.logs.existingClaim }}
            {{- else }}
            claimName: {{ template "erpnext.fullname" . }}-logs
            {{- end }}
            readOnly: false
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- with .Values.jobs.backup.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.backup.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.backup.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
