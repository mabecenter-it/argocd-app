{{- if .Values.jobs.backup.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  {{- if .Values.jobs.backup.jobName }}
  name: {{ .Values.jobs.backup.jobName }}
  {{- else }}
  name: {{ template "erpnext.fullname" . }}-backup-{{ now | date "20060102150405" }}
  {{- end }}
  labels:
    {{- include "erpnext.labels" . | nindent 4 }}
spec:
  backoffLimit: {{ .Values.jobs.backup.backoffLimit }}
  template:
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "erpnext.serviceAccountName" $ }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      containers:
      - name: backup
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["bash", "-c"]
        args:
          - >
            bench --site=$(SITE_NAME)
          {{- if .Values.jobs.backup.withFiles }}
            backup --with-files;
          {{- else }}
            backup;
          {{- end }}
          {{- if .Values.jobs.backup.push.enabled }}
            $(echo "Nombre del Sitio: $SITE_NAME")
            $(export LAST_FILE=$(ls -t /home/frappe/frappe-bench/sites/$SITE_NAME/private/backups/* | head -n1))
            "Nombre del LAST_FILE: $LAST_FILE"
            BASENAME=$(basename "$LAST_FILE")
            PREFIX=$(echo "$BASENAME" | cut -d'-' -f1)
            echo "El último prefijo es: $PREFIX"


            if [ ! -d "$BACKUP_DIR" ]; then
              echo "El directorio de backups no existe: $BACKUP_DIR" >&2
              exit 1
            fi

            # Listar los archivos en el directorio de backups
            echo "Contenido del directorio de backups:"
            $(ls -la "$BACKUP_DIR")

            # Iterar sobre cada archivo de respaldo con extensión .gz o .json
            for BACKUP_FILE in $(ls "$BACKUP_DIR" | grep -E '\.(gz|json)$'); do
              echo "Procesando archivo de respaldo: $BACKUP_FILE"

              # Extraer el prefijo de la fecha y hora del nombre del archivo para usarlo como carpeta
              DESTINATION_FOLDER=$(echo "$BACKUP_FILE" | cut -d'-' -f1)
              echo "Carpeta de Destino: $DESTINATION_FOLDER"

              # Construir el path completo dentro del bucket
              OBJECT_KEY="$DESTINATION_FOLDER/$BACKUP_FILE"
              echo "Objeto en el Bucket: $OBJECT_KEY"

              # Obtener la fecha actual en el formato requerido por AWS S3
              DATE=$(date -R)
              echo "Fecha: $DATE"

              # Crear la firma HMAC para la solicitud PUT
              STRING_TO_SIGN="PUT\n\napplication/octet-stream\n$DATE\n/$OBJECT_KEY"
              SIGNATURE=$(echo -en "$STRING_TO_SIGN" | openssl sha1 -hmac "$SECRET_KEY" -binary | openssl base64)

              # Realizar la subida del archivo utilizando curl
              curl -v -X PUT "$BACKUP_PATH/$OBJECT_KEY" \
                -H "Content-Type: application/octet-stream" \
                -H "Authorization: AWS $ACCESS_KEY:$SIGNATURE" \
                -H "Date: $DATE" \
                --upload-file "$BACKUP_DIR/$BACKUP_FILE"

              if [ $? -eq 0 ]; then
                echo "Subida exitosa de $BACKUP_FILE"
              else
                echo "Error al subir $BACKUP_FILE" >&2
              fi
            done

            echo "¡Subida de todos los archivos completada!"

          {{- end }}
        env:
          - name: "SITE_NAME"
            value: "{{ .Values.jobs.backup.siteName }}"
          - name: "ACCESS_KEY"
            value: "{{ .Values.jobs.backup.push.accessKey }}"
          - name: "SECRET_KEY"
            value: "{{ .Values.jobs.backup.push.secretKey }}"
          - name: "BACKUP_PATH"
            value: "{{ .Values.jobs.backup.push.endpoint }}/{{ .Values.jobs.backup.push.bucket }}"
        resources:
          {{- toYaml .Values.jobs.backup.resources | nindent 10 }}
        securityContext:
          {{- toYaml $.Values.securityContext | nindent 10 }}
        volumeMounts:
          - name: sites-dir
            mountPath: /home/frappe/frappe-bench/sites
          - name: logs
            mountPath: /home/frappe/frappe-bench/logs
      restartPolicy: Never
      volumes:
        - name: sites-dir
          {{- if .Values.persistence.worker.enabled }}
          persistentVolumeClaim:
            {{- if .Values.persistence.worker.existingClaim }}
            claimName: {{ .Values.persistence.worker.existingClaim }}
            {{- else }}
            claimName: {{ template "erpnext.fullname" . }}
            {{- end }}
            readOnly: false
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: logs
          {{- if .Values.persistence.logs.enabled }}
          persistentVolumeClaim:
            {{- if .Values.persistence.logs.existingClaim }}
            claimName: {{ .Values.persistence.logs.existingClaim }}
            {{- else }}
            claimName: {{ template "erpnext.fullname" . }}-logs
            {{- end }}
            readOnly: false
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- with .Values.jobs.backup.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.backup.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.jobs.backup.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
